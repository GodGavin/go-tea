{"version":3,"sources":["node_modules/morphdom/dist/morphdom.js","node_modules/form-serialize/index.js","debounce.js","gotea.js"],"names":["FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","freeGlobal","global","Object","freeSelf","self","root","Function","objectProto","prototype","objectToString","toString","nativeMax","Math","max","nativeMin","min","now","Date","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","undefined","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","remainingWait","debounced","isInvoking","arguments","leadingEdge","toNumber","isObject","cancel","flush","value","type","isObjectLike","isSymbol","call","other","valueOf","replace","isBinary","test","slice","module","exports","socket","WebSocket","window","location","protocol","host","onopen","path","pathname","onmessage","event","data","swapDOM","incomingHTML","containerID","el1","document","createElement","innerHTML","getElementById","sendMessage","msgString","msg","JSON","parse","log","send","stringify","submitForm","message","formID","serializeForm","sendMessageWithValue","inputID","gotea","formElements","elements","handleSelect","select","multiple","children","map","option","selected","filter","length","buildSelectArray","reduce","acc","el","tagName","SELECT","name","TEXTAREA","TEXT_INPUT","CHECKBOX","checked","RADIO","changeRoute","route","pushState","addEventListener","e","target","className","preventDefault","getAttribute"],"mappings":"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","file":"gotea.map","sourceRoot":"..","sourcesContent":["'use strict';\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\n\nvar testEl = doc ?\n    doc.body || doc.createElement('div') :\n    {};\n\n// Fixes <https://github.com/patrick-steele-idem/morphdom/issues/32>\n// (IE7+ support) <=IE7 does not support el.hasAttribute(name)\nvar actualHasAttributeNS;\n\nif (testEl.hasAttributeNS) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttributeNS(namespaceURI, name);\n    };\n} else if (testEl.hasAttribute) {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.hasAttribute(name);\n    };\n} else {\n    actualHasAttributeNS = function(el, namespaceURI, name) {\n        return el.getAttributeNode(namespaceURI, name) != null;\n    };\n}\n\nvar hasAttributeNS = actualHasAttributeNS;\n\n\nfunction toElement(str) {\n    if (!range && doc.createRange) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment;\n    if (range && range.createContextualFragment) {\n        fragment = range.createContextualFragment(str);\n    } else {\n        fragment = doc.createElement('body');\n        fragment.innerHTML = str;\n    }\n    return fragment.childNodes[0];\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    if (toEl.actualize &&\n        fromNodeName.charCodeAt(0) < 91 && /* from tag name is upper case */\n        toNodeName.charCodeAt(0) > 90 /* target tag name is lower case */) {\n        // If the target element is a virtual DOM node then we may need to normalize the tag name\n        // before comparing. Normal HTML elements that are in the \"http://www.w3.org/1999/xhtml\"\n        // are converted to upper case\n        return fromNodeName === toNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction morphAttrs(fromNode, toNode) {\n    var attrs = toNode.attributes;\n    var i;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    attrs = fromNode.attributes;\n\n    for (i = attrs.length - 1; i >= 0; --i) {\n        attr = attrs[i];\n        if (attr.specified !== false) {\n            attrName = attr.name;\n            attrNamespaceURI = attr.namespaceURI;\n\n            if (attrNamespaceURI) {\n                attrName = attr.localName || attrName;\n\n                if (!hasAttributeNS(toNode, attrNamespaceURI, attrName)) {\n                    fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n                }\n            } else {\n                if (!hasAttributeNS(toNode, null, attrName)) {\n                    fromNode.removeAttribute(attrName);\n                }\n            }\n        }\n    }\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name, '');\n        }\n    }\n}\n\nvar specialElHandlers = {\n    /**\n     * Needed for IE. Apparently IE doesn't think that \"selected\" is an\n     * attribute when reading over the attributes using selectEl.attributes\n     */\n    OPTION: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!hasAttributeNS(toEl, null, 'value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!hasAttributeNS(toEl, null, 'multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            var curChild = toEl.firstChild;\n            while(curChild) {\n                var nodeName = curChild.nodeName;\n                if (nodeName && nodeName.toUpperCase() === 'OPTION') {\n                    if (hasAttributeNS(curChild, null, 'selected')) {\n                        selectedIndex = i;\n                        break;\n                    }\n                    i++;\n                }\n                curChild = curChild.nextSibling;\n            }\n\n            fromEl.selectedIndex = i;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n    return node.id;\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = {};\n        var keyedRemovalList;\n\n        function addKeyedRemoval(key) {\n            if (keyedRemovalList) {\n                keyedRemovalList.push(key);\n            } else {\n                keyedRemovalList = [key];\n            }\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    }\n                }\n\n                handleNodeAdded(curChild);\n                curChild = nextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n            var curFromNodeKey;\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it is will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (toNode.isSameNode && toNode.isSameNode(fromNode)) {\n                return;\n            }\n\n            if (!childrenOnly) {\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                morphAttrs(fromEl, toEl);\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n                var curToNodeChild = toEl.firstChild;\n                var curFromNodeChild = fromEl.firstChild;\n                var curToNodeKey;\n\n                var fromNextSibling;\n                var toNextSibling;\n                var matchingFromEl;\n\n                outer: while (curToNodeChild) {\n                    toNextSibling = curToNodeChild.nextSibling;\n                    curToNodeKey = getNodeKey(curToNodeChild);\n\n                    while (curFromNodeChild) {\n                        fromNextSibling = curFromNodeChild.nextSibling;\n\n                        if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                        var curFromNodeType = curFromNodeChild.nodeType;\n\n                        var isCompatible = undefined;\n\n                        if (curFromNodeType === curToNodeChild.nodeType) {\n                            if (curFromNodeType === ELEMENT_NODE) {\n                                // Both nodes being compared are Element nodes\n\n                                if (curToNodeKey) {\n                                    // The target node has a key so we want to match it up with the correct element\n                                    // in the original DOM tree\n                                    if (curToNodeKey !== curFromNodeKey) {\n                                        // The current element in the original DOM tree does not have a matching key so\n                                        // let's check our lookup to see if there is a matching element in the original\n                                        // DOM tree\n                                        if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                            if (curFromNodeChild.nextSibling === matchingFromEl) {\n                                                // Special case for single element removals. To avoid removing the original\n                                                // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                                // we will instead discard the current node and wait until the next\n                                                // iteration to properly match up the keyed target element with its matching\n                                                // element in the original tree\n                                                isCompatible = false;\n                                            } else {\n                                                // We found a matching keyed element somewhere in the original DOM tree.\n                                                // Let's moving the original DOM node into the current position and morph\n                                                // it.\n\n                                                // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                                // the `removeNode()` function for the node that is being discarded so that\n                                                // all lifecycle hooks are correctly invoked\n                                                fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                                fromNextSibling = curFromNodeChild.nextSibling;\n\n                                                if (curFromNodeKey) {\n                                                    // Since the node is keyed it might be matched up later so we defer\n                                                    // the actual removal to later\n                                                    addKeyedRemoval(curFromNodeKey);\n                                                } else {\n                                                    // NOTE: we skip nested keyed nodes from being removed since there is\n                                                    //       still a chance they will be matched up later\n                                                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                                }\n\n                                                curFromNodeChild = matchingFromEl;\n                                            }\n                                        } else {\n                                            // The nodes are not compatible since the \"to\" node has a key and there\n                                            // is no matching keyed node in the source tree\n                                            isCompatible = false;\n                                        }\n                                    }\n                                } else if (curFromNodeKey) {\n                                    // The original has a key\n                                    isCompatible = false;\n                                }\n\n                                isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                                if (isCompatible) {\n                                    // We found compatible DOM elements so transform\n                                    // the current \"from\" node to match the current\n                                    // target DOM node.\n                                    morphEl(curFromNodeChild, curToNodeChild);\n                                }\n\n                            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                                // Both nodes being compared are Text or Comment nodes\n                                isCompatible = true;\n                                // Simply update nodeValue on the original node to\n                                // change the text value\n                                if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                    curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                                }\n\n                            }\n                        }\n\n                        if (isCompatible) {\n                            // Advance both the \"to\" child and the \"from\" child since we found a match\n                            curToNodeChild = toNextSibling;\n                            curFromNodeChild = fromNextSibling;\n                            continue outer;\n                        }\n\n                        // No compatible match so remove the old node from the DOM and continue trying to find a\n                        // match in the original DOM. However, we only do this if the from node is not keyed\n                        // since it is possible that a keyed node might match up with a node somewhere else in the\n                        // target tree and we don't want to discard it just yet since it still might find a\n                        // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                        // that didn't find a home\n                        if (curFromNodeKey) {\n                            // Since the node is keyed it might be matched up later so we defer\n                            // the actual removal to later\n                            addKeyedRemoval(curFromNodeKey);\n                        } else {\n                            // NOTE: we skip nested keyed nodes from being removed since there is\n                            //       still a chance they will be matched up later\n                            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                        }\n\n                        curFromNodeChild = fromNextSibling;\n                    }\n\n                    // If we got this far then we did not find a candidate match for\n                    // our \"to node\" and we exhausted all of the children \"from\"\n                    // nodes. Therefore, we will just append the current \"to\" node\n                    // to the end\n                    if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                        fromEl.appendChild(matchingFromEl);\n                        morphEl(matchingFromEl, curToNodeChild);\n                    } else {\n                        var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                        if (onBeforeNodeAddedResult !== false) {\n                            if (onBeforeNodeAddedResult) {\n                                curToNodeChild = onBeforeNodeAddedResult;\n                            }\n\n                            if (curToNodeChild.actualize) {\n                                curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                            }\n                            fromEl.appendChild(curToNodeChild);\n                            handleNodeAdded(curToNodeChild);\n                        }\n                    }\n\n                    curToNodeChild = toNextSibling;\n                    curFromNodeChild = fromNextSibling;\n                }\n\n                // We have processed all of the \"to nodes\". If curFromNodeChild is\n                // non-null then we still have some from nodes left over that need\n                // to be removed\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n                    if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n                    curFromNodeChild = fromNextSibling;\n                }\n            }\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphEl(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n","// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i;\n\n// node names which could be successful controls\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i;\n\n// Matches bracket notation.\nvar brackets = /(\\[[^\\[\\]]*\\])/g;\n\n// serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\nfunction serialize(form, options) {\n    if (typeof options != 'object') {\n        options = { hash: !!options };\n    }\n    else if (options.hash === undefined) {\n        options.hash = true;\n    }\n\n    var result = (options.hash) ? {} : '';\n    var serializer = options.serializer || ((options.hash) ? hash_serializer : str_serialize);\n\n    var elements = form && form.elements ? form.elements : [];\n\n    //Object store each radio and set if it's empty or not\n    var radio_store = Object.create(null);\n\n    for (var i=0 ; i<elements.length ; ++i) {\n        var element = elements[i];\n\n        // ingore disabled fields\n        if ((!options.disabled && element.disabled) || !element.name) {\n            continue;\n        }\n        // ignore anyhting that is not considered a success field\n        if (!k_r_success_contrls.test(element.nodeName) ||\n            k_r_submitter.test(element.type)) {\n            continue;\n        }\n\n        var key = element.name;\n        var val = element.value;\n\n        // we can't just use element.value for checkboxes cause some browsers lie to us\n        // they say \"on\" for value when the box isn't checked\n        if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n            val = undefined;\n        }\n\n        // If we want empty elements\n        if (options.empty) {\n            // for checkbox\n            if (element.type === 'checkbox' && !element.checked) {\n                val = '';\n            }\n\n            // for radio\n            if (element.type === 'radio') {\n                if (!radio_store[element.name] && !element.checked) {\n                    radio_store[element.name] = false;\n                }\n                else if (element.checked) {\n                    radio_store[element.name] = true;\n                }\n            }\n\n            // if options empty is true, continue only if its radio\n            if (val == undefined && element.type == 'radio') {\n                continue;\n            }\n        }\n        else {\n            // value-less fields are ignored unless options.empty is true\n            if (!val) {\n                continue;\n            }\n        }\n\n        // multi select boxes\n        if (element.type === 'select-multiple') {\n            val = [];\n\n            var selectOptions = element.options;\n            var isSelectedOptions = false;\n            for (var j=0 ; j<selectOptions.length ; ++j) {\n                var option = selectOptions[j];\n                var allowedEmpty = options.empty && !option.value;\n                var hasValue = (option.value || allowedEmpty);\n                if (option.selected && hasValue) {\n                    isSelectedOptions = true;\n\n                    // If using a hash serializer be sure to add the\n                    // correct notation for an array in the multi-select\n                    // context. Here the name attribute on the select element\n                    // might be missing the trailing bracket pair. Both names\n                    // \"foo\" and \"foo[]\" should be arrays.\n                    if (options.hash && key.slice(key.length - 2) !== '[]') {\n                        result = serializer(result, key + '[]', option.value);\n                    }\n                    else {\n                        result = serializer(result, key, option.value);\n                    }\n                }\n            }\n\n            // Serialize if no selected options and options.empty is true\n            if (!isSelectedOptions && options.empty) {\n                result = serializer(result, key, '');\n            }\n\n            continue;\n        }\n\n        result = serializer(result, key, val);\n    }\n\n    // Check for all empty radio buttons and serialize them with key=\"\"\n    if (options.empty) {\n        for (var key in radio_store) {\n            if (!radio_store[key]) {\n                result = serializer(result, key, '');\n            }\n        }\n    }\n\n    return result;\n}\n\nfunction parse_keys(string) {\n    var keys = [];\n    var prefix = /^([^\\[\\]]*)/;\n    var children = new RegExp(brackets);\n    var match = prefix.exec(string);\n\n    if (match[1]) {\n        keys.push(match[1]);\n    }\n\n    while ((match = children.exec(string)) !== null) {\n        keys.push(match[1]);\n    }\n\n    return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n    if (keys.length === 0) {\n        result = value;\n        return result;\n    }\n\n    var key = keys.shift();\n    var between = key.match(/^\\[(.+?)\\]$/);\n\n    if (key === '[]') {\n        result = result || [];\n\n        if (Array.isArray(result)) {\n            result.push(hash_assign(null, keys, value));\n        }\n        else {\n            // This might be the result of bad name attributes like \"[][foo]\",\n            // in this case the original `result` object will already be\n            // assigned to an object literal. Rather than coerce the object to\n            // an array, or cause an exception the attribute \"_values\" is\n            // assigned as an array.\n            result._values = result._values || [];\n            result._values.push(hash_assign(null, keys, value));\n        }\n\n        return result;\n    }\n\n    // Key is an attribute name and can be assigned directly.\n    if (!between) {\n        result[key] = hash_assign(result[key], keys, value);\n    }\n    else {\n        var string = between[1];\n        // +var converts the variable into a number\n        // better than parseInt because it doesn't truncate away trailing\n        // letters and actually fails if whole thing is not a number\n        var index = +string;\n\n        // If the characters between the brackets is not a number it is an\n        // attribute name and can be assigned directly.\n        if (isNaN(index)) {\n            result = result || {};\n            result[string] = hash_assign(result[string], keys, value);\n        }\n        else {\n            result = result || [];\n            result[index] = hash_assign(result[index], keys, value);\n        }\n    }\n\n    return result;\n}\n\n// Object/hash encoding serializer.\nfunction hash_serializer(result, key, value) {\n    var matches = key.match(brackets);\n\n    // Has brackets? Use the recursive assignment function to walk the keys,\n    // construct any missing objects in the result tree and make the assignment\n    // at the end of the chain.\n    if (matches) {\n        var keys = parse_keys(key);\n        hash_assign(result, keys, value);\n    }\n    else {\n        // Non bracket notation can make assignments directly.\n        var existing = result[key];\n\n        // If the value has been assigned already (for instance when a radio and\n        // a checkbox have the same name attribute) convert the previous value\n        // into an array before pushing into it.\n        //\n        // NOTE: If this requirement were removed all hash creation and\n        // assignment could go through `hash_assign`.\n        if (existing) {\n            if (!Array.isArray(existing)) {\n                result[key] = [ existing ];\n            }\n\n            result[key].push(value);\n        }\n        else {\n            result[key] = value;\n        }\n    }\n\n    return result;\n}\n\n// urlform encoding serializer\nfunction str_serialize(result, key, value) {\n    // encode newlines as \\r\\n cause the html spec says so\n    value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n    value = encodeURIComponent(value);\n\n    // spaces should be '+' rather than '%20'.\n    value = value.replace(/%20/g, '+');\n    return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","import morphdom from \"morphdom\";\nimport serialize from \"form-serialize\";\nimport debounce from \"./debounce\";\n\n// Websockets\n\nconst socket = new WebSocket(\n  window.location.protocol === \"https:\"\n    ? \"wss://\"\n    : \"ws://\" + window.location.host + \"/server\"\n);\n\nsocket.onopen = () => {\n  const path = window.location.pathname;\n  if (path != \"/\") {\n    changeRoute(path);\n  }\n};\n\nsocket.onmessage = event => {\n  swapDOM(event.data, \"view\");\n};\n\n// DOM Swap with Morphdom\n// with the option 'childrenOnly' Morphom swaps children of the containers,\n// therefore we place the incoming HTML in a div\nconst swapDOM = (incomingHTML, containerID) => {\n  const el1 = document.createElement(\"div\");\n  el1.innerHTML = incomingHTML;\n  morphdom(document.getElementById(containerID), el1, {\n    childrenOnly: true\n  });\n};\n\nconst sendMessage = (msgString, args) => {\n  const msg = {\n    message: msgString,\n    args: JSON.parse(args)\n  };\n  console.log(\"Sending websocket message: \", msg);\n  socket.send(JSON.stringify(msg));\n};\n\nfunction submitForm(message, formID) {\n  const msg = {\n    message,\n    args: serializeForm(formID)\n  };\n\n  console.log(\"Sending websocket message: \", msg);\n  socket.send(JSON.stringify(msg));\n}\n\nfunction sendMessageWithValue(message, inputID) {\n  let value = document.getElementById(inputID).value;\n\n  let msg = {\n    message,\n    args: value\n  };\n\n  console.log(\"Sending websocket message: \", msg);\n  socket.send(JSON.stringify(msg));\n}\n\nwindow.gotea = {\n  sendMessage: debounce(sendMessage, 200, { leading: true }),\n  submitForm: debounce(submitForm, 200, { leading: true }),\n  sendMessageWithValue: debounce(sendMessageWithValue, 200, { leading: true })\n};\n\nconst serializeForm = formID => {\n  const formElements = [...document.getElementById(formID).elements];\n  const TEXT_INPUT = \"text\";\n  const CHECKBOX = \"checkbox\";\n  const RADIO = \"radio\";\n  const SELECT = \"SELECT\"; // for some reason tagName returns uppercase name\n  const TEXTAREA = \"TEXTAREA\";\n\n  // map over array of options (elements children). If option is selected, return it's value\n  // otherwise return empty string and then filter out empty strings from the array so we end up\n  // with array of selected options.\n  const buildSelectArray = select =>\n    [...select.children]\n      .map(option => (option.selected ? option.value : \"\"))\n      .filter(value => value.length > 0);\n\n  // if select has multiple attribute, build array of selected options,\n  // otherwise, for dropdown for example, return select's value\n  const handleSelect = select =>\n    select.multiple ? buildSelectArray(select) : select.value;\n\n  // reduce over form elements and check against their type (for inputs) and tagName for other tags\n  // (textarea/select etc). Return data shaped specifically for structs on server-side, so they are easy\n  // to decode\n  return formElements.reduce((acc, el) => {\n    switch (el.tagName) {\n      case SELECT:\n        // select may have multiple values, check if it is a case and return proper value (array or string)\n        acc[el.name] = handleSelect(el);\n        break;\n      case TEXTAREA:\n        // simple string to field name assignment\n        acc[el.name] = el.value;\n        break;\n    }\n    switch (el.type) {\n      // simple string to field name assignment\n      case TEXT_INPUT:\n        acc[el.name] = el.value;\n        break;\n      case CHECKBOX:\n        // see if checkbox is checked and assign bool to it's name.\n        acc[el.name] = el.checked;\n        break;\n      case RADIO:\n        // if radio is checked, assign it's value (string) to it's name\n        if (el.checked) {\n          acc[el.name] = el.value;\n        }\n        break;\n    }\n    return acc;\n  }, {});\n};\n\nfunction changeRoute(route) {\n  history.pushState({}, \"\", route);\n\n  const msg = {\n    message: \"CHANGE_ROUTE\",\n    args: route\n  };\n\n  console.log(\"Sending websocket message: \", msg);\n  socket.send(JSON.stringify(msg));\n}\n\ndocument.addEventListener(\n  \"click\",\n  e => {\n    if (/gotea-link/.test(e.target.className)) {\n      e.preventDefault();\n      changeRoute(e.target.getAttribute(\"href\"));\n      return false;\n    }\n  },\n  false\n);\n"]}